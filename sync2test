#!/bin/bash
# Script de sincronizacao de codigo-fonte com o servidor de teste
# 03/09/2009 - Luiz Sanches
# Versao 0.3

projeto="siig"

# Verifica a existencia do programa dialog
if [ ! -e "/usr/bin/dialog" ]; then
	echo "ATENCAO! E necessario instalar o programa 'dialog'."
	exit
fi

# Verifica a existencia do arquivo de configuracao, para carregamento das variaveis
if [ -e "/home/$USER/.sync2test" ]; then
	. /home/$USER/.sync2test
else
	usuario=$( dialog --stdout --inputbox 'Digite o nome do usuario:' 0 0 )
	servidor=$( dialog --stdout --inputbox 'Digite o endereco do servidor:' 0 0 )
	senha_svn=$( dialog --stdout --passwordbox 'Digite a senha do svn:' 0 0 )	
	destino=$( dialog --stdout --inputbox 'Digite o diretorio de destino (com / no final):' 0 0 )

	echo "usuario=\"$usuario\"" > /home/$USER/.sync2test
	echo "servidor=\"$servidor\"" >> /home/$USER/.sync2test
	echo "senha_svn=\"$senha_svn\"" >> /home/$USER/.sync2test
	echo "dir_destino=\"$servidor:$destino\"" >> /home/$USER/.sync2test
fi

# Criar autorizacao para nao pedir senha ao conectar via ssh
#if [ ! -e "/home/$USER/.ssh/authorized_keys" ]; then
#	ssh -p 1529 $usuario@$servidor 'mkdir ~/.ssh ; touch ~/.ssh/authorized_keys'
#	ssh-keygen -t dsa -f ~/.ssh/id_dsa
#	cat ~/.ssh/id_dsa.pub | ssh $usuario@$servidor 'cat - >> ~/.ssh/authorized_keys'
#	cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys
#fi

arquivo_log=".sync2test-temp.log" 
arquivo_log_permanente="sync2test.log"

# deleta o arquivo de log para mostrar somente a ultima sincronizacao
rm $arquivo_log

# Selecao de modulo
modulo=$( dialog \
	--stdout \
	--menu "Selecione o modulo a ser atualizado para o servidor de teste:" \
	0 0 0 \
	Sco 'Controle de Obras' \
	Afr 'Administracao de Frota' \
	Gestao 'Sala de Gestao' )

# se o modulo for nulo, emitir mensagem e sair
if [ -z $modulo ]
then
	dialog                                             \
		--title 'sync2test'                            \
		--msgbox 'Nenhum modulo foi selecionado. Operacao cancelada.'  \
	6 40
	exit
else
	# Adiciona um nivel de diretorio na variavel modulo
	arvore="/view/"
	facade=$modulo

	# Converte o conteudo da variavel modulo para minusculo
	modulo=$(echo $modulo | tr [:upper:] [:lower:])

	# prepara o diretorio de sincronizacao
	dir_tmp_sync="/tmp/sync2test/$projeto"

	dir_backup="$dir_destinobkp-$projeto-$modulo/`date +%Y-%m-%d-%H-%M`"

	# Une view/nome do modulo
	modulo=$arvore$modulo

	# Se o diretorio existir executar SVN update
	if [ -e $dir_tmp_sync ]; then
		svn update $dir_tmp_sync
	else # Senao executar SVN checkout
		mkdir -p $dir_tmp_sync 2> /dev/null
		echo "checkout"
		svn checkout svn://$servidor/var/svn/desenvolvimento/$projeto --username $usuario --password $senha_svn $dir_tmp_sync
	fi

	# Sincroniza o projeto criando um backup
	dir_existe=$(ssh -p 1529 $usuario@$servidor "ls $projeto")

	if [ -z $dir_existe ]; then
		rsync -Cravzp -h -b --backup-dir=$dir_backup --delete --log-file=$arquivo_log -e "ssh -l $usuario -p 1529" $dir_tmp_sync $dir_destino
	else
		rsync -Cravzp -h -b --backup-dir=$dir_backup --delete --log-file=$arquivo_log -e "ssh -l $usuario -p 1529" $dir_tmp_sync$modulo $dir_destino$projeto$arvore
	fi

	# Sincroniza as fachadas do modulo
	cd $dir_tmp_sync/model/facade
	rsync -Cravzp -h -b --backup-dir=$dir_backup --delete --log-file=$arquivo_log -t -e "ssh -l $usuario -p 1529" $facade*.php $dir_destino$projeto/model/facade/
	cd -
	#rsync -Cravzp -h -b --backup-dir=$dir_backup --delete --log-file=$arquivo_log -t -e "ssh -l $usuario -p 1529" "$dir_tmp_sync/model/facade/" "$dir_destino$projeto/model/facade/"

	# Atualiza o arquivo de log permanente
	cat $arquivo_log >> $arquivo_log_permanente

	dialog                                             \
		--title 'sync2test - log da atualizacao'       \
		--textbox $arquivo_log   \
	0 0
	clear
fi
