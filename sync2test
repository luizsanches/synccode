#!/bin/bash
# Script de sincronizacao de codigo-fonte com o servidor de teste
# 10/09/2009 - Luiz Sanches
# Versao 0.6

principal() {
	DIR_SCRIPT=$(pwd)
	PROJETO="siig"
	ARQUIVO_CONF="$HOME/.sync2test"

	# Verifica a existencia do programa dialog
	if [ ! -e "/usr/bin/dialog" ]; then
		echo "ATENCAO! E necessario instalar o programa 'dialog'."
		exit
	fi

	# Verifica a existencia do arquivo de configuracao, para carregamento das variaveis
	if [ -e $ARQUIVO_CONF ]; then
		. $ARQUIVO_CONF
	else
		USUARIO=$( dialog --stdout --inputbox 'Digite o nome do usuario:' 0 0 )
		SERVIDOR=$( dialog --stdout --inputbox 'Digite o endereco do servidor:' 0 0 )
		SENHA_SVN=$( dialog --stdout --passwordbox 'Digite a senha do svn:' 0 0 )	
		DIR_DESTINO=$( dialog --stdout --inputbox 'Digite o diretorio de destino (com / no final):' 0 0 )
		PORTA_SSH=$( dialog --stdout --inputbox 'Digite o numero da porta do SSH:' 0 0 )

		echo "USUARIO=\"$USUARIO\"" > $ARQUIVO_CONF
		echo "SERVIDOR=\"$SERVIDOR\"" >> $ARQUIVO_CONF
		echo "SENHA_SVN=\"$SENHA_SVN\"" >> $ARQUIVO_CONF
		echo "DIR_DESTINO=\"$DIR_DESTINO\"" >> $ARQUIVO_CONF
		echo "PORTA_SSH=\"$PORTA_SSH\"" >> $ARQUIVO_CONF
	fi

	CAMINHO_DESTINO=$SERVIDOR:$DIR_DESTINO

	# Criar autorizacao para nao pedir senha ao conectar via ssh
	if [ ! -e "$HOME/.ssh/authorized_keys" ]; then
		ssh -p $PORTA_SSH $USUARIO@$SERVIDOR 'mkdir ~/.ssh ; touch ~/.ssh/authorized_keys'
		ssh-keygen -t dsa -f ~/.ssh/id_dsa
		cat ~/.ssh/id_dsa.pub | ssh -p $PORTA_SSH $USUARIO@$SERVIDOR 'cat - >> ~/.ssh/authorized_keys'
		cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys
	fi

	ARQUIVO_LOG="$HOME/.sync2test-temp.log" 
	ARQUIVO_LOG_PERMANENTE="$HOME/.sync2test.log"

	#PERMISSOES="Du+wrx,Dgo+rx,Fugo+r,Fu+w,Fgo-w,Fugo-x"
	#PERMISSOES="Fugo+r,Fu+w,Fgo-w,Fugo-x"
	PERMISSOES="Fugo+rw,Fugo-x"

	# prepara o diretorio de sincronizacao
	DIR_TMP_SYNC="/tmp/sync2test/$PROJETO"

	# deleta o arquivo de log para mostrar somente a ultima sincronizacao
	rm $ARQUIVO_LOG 2> /dev/null

	# Selecao de modulo
	MODULO=$( dialog \
		--stdout \
		--menu "Selecione o modulo do $PROJETO a ser atualizado para o servidor de teste:" \
		0 0 0 \
		Sco 'Controle de Obras' \
		Afr 'Administracao de Frota' \
		Gestao 'Sala de Gestao' \
		Estrutura 'Demais diretorios do projeto')

	# se o modulo for nulo, emitir mensagem e sair
	if [ -z $MODULO ]; then
		dialog                                             \
			--title 'sync2test'                            \
			--msgbox 'Nenhum modulo foi selecionado. Operacao cancelada.'  \
		6 40
		exit
	else
		# Se o modulo for igual 'Estrutura', deve perguntar se deseja sincronizar os demais diretorios do projeto
		if [ $MODULO = "Estrutura" ]; then
			dialog --yesno "Deseja sincronizar as demais pastas do projeto $PROJETO?" 0 0
	
			if [ $? = 0 ]; then
				# Executa a funcao para baixar o projeto do SVN
				baixaProjetoSvn
		
				sincronizaDiretorio /config/ d
				sincronizaDiretorio /controller/ d
				sincronizaDiretorio /model/ d
				sincronizaDiretorio /model/database/ d
				sincronizaDiretorio /model/generic/ d
				sincronizaDiretorio /model/template/ dr
				sincronizaDiretorio /model/utils/ dr
				sincronizaDiretorio /view/ d
				sincronizaDiretorio /view/css/ dr
				sincronizaDiretorio /view/images/ dr
				sincronizaDiretorio /view/js/ dr
				sincronizaDiretorio /view/style/ dr
	
				exibeResultado
			fi
		else # Para a escolha de um projeto
			# Adiciona um nivel de diretorio na variavel modulo
			ARVORE="/view/"
			FACADE=$MODULO
	
			# Converte o conteudo da variavel modulo para minusculo
			MODULO=$(echo $MODULO | tr [:upper:] [:lower:])

			DATA_HORA=`date +%Y-%m-%d-%H-%M`
	
			DIR_BACKUP=$DIR_DESTINO"bkp-$PROJETO$ARVORE$MODULO/$DATA_HORA"
	
			# Une view/nome do modulo
			MODULO=$ARVORE$MODULO
	
			# Executa a funcao para baixar o projeto do SVN
			baixaProjetoSvn
	
			# Sincroniza o projeto criando um backup
			DIR_EXISTE=$(ssh -p $PORTA_SSH $USUARIO@$SERVIDOR "ls $DIR_DESTINO$PROJETO/index.php")
	
			if [ -z $DIR_EXISTE ]; then
				sincroniza $DIR_TMP_SYNC $CAMINHO_DESTINO ra
			else
				sincroniza $DIR_TMP_SYNC$MODULO $CAMINHO_DESTINO$PROJETO$ARVORE ra
			fi
	
			# Sincroniza as fachadas do modulo
			DIR_BACKUP=$DIR_DESTINO"bkp-$PROJETO/model/facade/$DATA_HORA"
			cd $DIR_TMP_SYNC/model/facade/
			sincroniza "$FACADE*.php" $CAMINHO_DESTINO$PROJETO/model/facade/ r
			cd -
			#sincroniza $DIR_TMP_SYNC/model/facade/ $CAMINHO_DESTINO$PROJETO/model/facade/ r --include="+ $DIR_TMP_SYNC/model/facade/$FACADE*.php" 

			exibeResultado
		fi
	fi
}

baixaProjetoSvn() {
	# Se o diretorio existir executar SVN update
	if [ -e $DIR_TMP_SYNC ]; then
		svn update $DIR_TMP_SYNC
	else # Senao executar SVN checkout
		mkdir -p $DIR_TMP_SYNC 2> /dev/null
		svn checkout svn://$SERVIDOR/var/svn/desenvolvimento/$PROJETO --username $USUARIO --password $SENHA_SVN $DIR_TMP_SYNC
	fi
}

sincroniza() {
	#echo $1 = origem
	#echo $2 = destino
	#echo $3 = r (recursive), a (archive), d (directory)
	#echo $4 = qualquer parametro do rsync

	# Sincroniza o projeto criando um backup
	rsync -Cvzpt$3 $4 --chmod=$PERMISSOES -h -b --backup-dir=$DIR_BACKUP --delete --log-file=$ARQUIVO_LOG -e "ssh -l $USUARIO -p $PORTA_SSH" $1 $2
		
	# Apaga as 2 primeiras e 2 ultimas linhas do log que nao mostram o nome do arquivo
	cp $ARQUIVO_LOG $ARQUIVO_LOG.old
	sed '/building/,+1d;/sent/,+1d' $ARQUIVO_LOG.old > $ARQUIVO_LOG
	rm $ARQUIVO_LOG.old

	# Atualiza o arquivo de log permanente
	cat $ARQUIVO_LOG >> $ARQUIVO_LOG_PERMANENTE
}

sincronizaDiretorio() {
	#echo $1 = diretorio
	#echo $2 = opcao do rsync
	DIR_BACKUP=$DIR_DESTINO"bkp-$PROJETO$1`date +%Y-%m-%d-%H-%M`"

	sincroniza $DIR_TMP_SYNC$1 $CAMINHO_DESTINO$PROJETO$1 $2
}

exibeResultado() {
	CONTEUDO=$(cat $ARQUIVO_LOG)

	if [ -z "$CONTEUDO" ]; then
		dialog                                             \
			--title 'sync2test - log da atualizacao'       \
			--msgbox 'Nenhum arquivo foi atualizado'   \
		0 0
	else
		dialog                                             \
			--title 'sync2test - log da atualizacao'       \
			--textbox $ARQUIVO_LOG   \
		0 0
	fi
	clear
}

principal $1
