#!/bin/bash
# sync2test
# Programa de sincronizacao de codigo-fonte com o servidor de teste
# 29/09/2009 - Luiz Sanches
# Versao 0.13

principal() {
	# Definicao de variaveis do programa
	SCRIPT="sync2test"
	VERSAO_SCRIPT=$(sed '/Versao/!d; q' $0)

	DIR_SCRIPT=$(pwd)

	DIR_CONF="/opt/$SCRIPT"
	DIR_CONF_USER="$HOME/.$SCRIPT"

	ARQUIVO_CONF="$DIR_CONF/$SCRIPT.conf"
	ARQUIVO_CONF_USER="$DIR_CONF_USER/$SCRIPT.conf"

	ARQUIVO_PROJETOS="$DIR_CONF/projetos"

	ARQUIVO_LOG="$DIR_CONF_USER/.$SCRIPT-temp.log" 
	ARQUIVO_LOG_PERMANENTE="$DIR_CONF_USER/$SCRIPT.log"

	##PERMISSOES="Do+w,Fugo+rw,Fugo-x"
	PERMISSOES="Fugo+rw,Fugo-x"

	# Criacao dos diretorios de configuracao do programa
	[ ! -e "$DIR_CONF" ] && mkdir "$DIR_CONF"
	[ ! -e "$DIR_CONF_USER" ] && mkdir "$DIR_CONF_USER"

	# Definicao do program de dialogo como o usuario
	if [ "$DISPLAY" ]; then
		DIALOG="Xdialog"

		# Verifica a existencia do programa Xdialog
		[ ! -e "/usr/bin/$DIALOG" ] && DIALOG="dialog"
	else
		DIALOG="dialog"
	fi

	# Verifica a existencia dos programas
	verificaArquivo "/usr/bin/$DIALOG"
	verificaArquivo "/usr/bin/svn"
	verificaArquivo "/usr/bin/rsync"
	verificaArquivo "/bin/sed"

	# Cria a variavel $DIALOG_TITLE com parametro do titulo na tela de fundo
	DIALOG="$DIALOG --backtitle '$SCRIPT - Sincroniza SVN com Servidor de Teste. ${VERSAO_SCRIPT:2}' "

	# Verifica a existencia do arquivo de projetos
	if [ ! -e "$ARQUIVO_PROJETOS" ]; then
		echo "siig:Sistemas Integrados" > $ARQUIVO_PROJETOS
	fi

	# seleciona os projetos, no arquivo projetos, com o padrao projeto:descricao
	LISTA_PROJETOS=$(sed '-n' 'p' $ARQUIVO_PROJETOS | sed 's/:/ "/;s/$/"/')

	# Selecao de projeto
	PROJETO=$(eval "$DIALOG --stdout --menu \"Selecione o projeto:\" 0 0 0 $LISTA_PROJETOS")

	# se o projeto for nulo, emitir mensagem e sair
	if [ -z "$PROJETO" ]; then
		eval "$DIALOG --title \"$SCRIPT\" --msgbox \"Nenhum projeto foi selecionado. Operacao cancelada.\" 0 0"
		exit
	fi
	# Fim secao dos projetos

	# Verifica a existencia dos arquivos de modulos das gerencias
	if [ "$PROJETO" = "siig" ]; then
		ARQUIVO_MODULOS_GPI="$DIR_CONF/${PROJETO}_gpi_modulos"
		ARQUIVO_MODULOS_GPA="$DIR_CONF/${PROJETO}_gpa_modulos"

		if [ ! -e "$ARQUIVO_MODULOS_GPI" ]; then
			echo "Afr:Administracao de Frota" > $ARQUIVO_MODULOS_GPI
			echo "Sco:Controle de Obras" >> $ARQUIVO_MODULOS_GPI
			echo "Gestao:Sala de Gestao" >> $ARQUIVO_MODULOS_GPI
		fi

		if [ ! -e "$ARQUIVO_MODULOS_GPA" ]; then
			echo "Seg:Seguranca" > $ARQUIVO_MODULOS_GPA
			echo "Cpr:Controle de Processos" >> $ARQUIVO_MODULOS_GPA
			echo "Aof:Administracao Financeira" >> $ARQUIVO_MODULOS_GPA
			echo "Talentos:Banco de Talentos" >> $ARQUIVO_MODULOS_GPA
		fi
	fi

	# Verifica a existencia do arquivo de configuracao, para carregamento das variaveis
	if [ -e "$ARQUIVO_CONF" ]; then
		. $ARQUIVO_CONF
	else
		SERVIDOR=$(eval $DIALOG --stdout --inputbox \"Digite o endereco do servidor SVN:\" 0 0 \"192.168.200.12\")
		DIR_REPOSITORIO=$(eval $DIALOG --stdout --inputbox \"Digite o caminho do repositorio SVN \(com / no final\):\" 0 0 \"/var/svn/desenvolvimento/\")
		DIR_DESTINO=$(eval $DIALOG --stdout --inputbox \"Digite o diretorio de destino \(com / no final\):\" 0 0 \"/var/www/\")

		echo "SERVIDOR=\"$SERVIDOR\"" >> $ARQUIVO_CONF
		echo "DIR_REPOSITORIO=\"$DIR_REPOSITORIO\"" >> $ARQUIVO_CONF
		echo "DIR_DESTINO=\"$DIR_DESTINO\"" >> $ARQUIVO_CONF
	fi

	# Verifica a existencia do arquivo de configuracao do usuario, para carregamento das variaveis
	if [ -e "$ARQUIVO_CONF_USER" ]; then
		. $ARQUIVO_CONF_USER
	else
		USUARIO=$(eval $DIALOG --stdout --inputbox \"Digite o nome do usuario de acesso ao SVN:\" 0 0 \"$USER\")
		SENHA_SVN=$(eval $DIALOG --stdout --inputbox \"Digite a senha do SVN:\" 0 0 \"desenv123\")

		# Selecao de gerencia
		GERENCIA=$(eval $DIALOG --stdout --menu \"Selecione a gerencia em que trabalha:\" 0 0 0 GPI \"Projetos_Institucionais\" GPA \"Projetos_Academicos\")

		# Converte o conteudo da variavel gerencia para minusculo
		GERENCIA=$(echo $GERENCIA | tr [:upper:] [:lower:])

		# se a gerencia for nula, emitir mensagem e sair
		if [ -z "$GERENCIA" ]; then
			eval $DIALOG --title \"$SCRIPT\" --msgbox \"Nenhuma gerencia foi selecionada. Operacao cancelada.\" 0 0
			exit
		fi
		# Fim secao de gerencia

		echo "USUARIO=\"$USUARIO\"" >> $ARQUIVO_CONF_USER
		echo "SENHA_SVN=\"$SENHA_SVN\"" >> $ARQUIVO_CONF_USER
		echo "GERENCIA=\"$GERENCIA\"" >> $ARQUIVO_CONF_USER
	fi

	CAMINHO_DESTINO="$DIR_DESTINO"

	# prepara o diretorio de sincronizacao
	DIR_TMP_SYNC="$DIR_CONF_USER/tmp/$PROJETO"

	# deleta o arquivo de log para mostrar somente a ultima sincronizacao
	[ -e "$ARQUIVO_LOG" ] && rm $ARQUIVO_LOG

	# seleciona os modulos do projeto, no arquivo $PROJETO_$GERENCIA_modulos, com o padrao modulo:descricao
	ARQUIVO_MODULOS="$DIR_CONF/${PROJETO}_${GERENCIA}_modulos"
	
	verificaArquivo "$ARQUIVO_MODULOS"

	MODULOS_PROJETO=$(sed '-n' 'p' $ARQUIVO_MODULOS | sed 's/:/ "/;s/$/"/')

	ARQUIVO_PROJETO_DEMAIS="$DIR_CONF/${PROJETO}_demais"

	ARQUIVO_PROJETO_COMPLETO="$DIR_CONF/${PROJETO}_completo"

	if [ "$PROJETO" = "siig" ]; then
		if [ ! -e "$ARQUIVO_PROJETO_DEMAIS" ]; then
			echo "/config/ d" > $ARQUIVO_PROJETO_DEMAIS
			echo "/controller/ d" >> $ARQUIVO_PROJETO_DEMAIS 
			echo "/model/ d" >> $ARQUIVO_PROJETO_DEMAIS 
			echo "/model/database/ d" >> $ARQUIVO_PROJETO_DEMAIS 
			echo "/model/generic/ d" >> $ARQUIVO_PROJETO_DEMAIS 
			echo "/model/template/ dr" >> $ARQUIVO_PROJETO_DEMAIS 
			echo "/model/utils/ dr" >> $ARQUIVO_PROJETO_DEMAIS 
			echo "/view/ d" >> $ARQUIVO_PROJETO_DEMAIS 
			echo "/view/css/ dr" >> $ARQUIVO_PROJETO_DEMAIS 
			echo "/view/images/ dr" >> $ARQUIVO_PROJETO_DEMAIS 
			echo "/view/js/ dr" >> $ARQUIVO_PROJETO_DEMAIS 
			echo "/view/style/ dr" >> $ARQUIVO_PROJETO_DEMAIS 
		fi
	fi

	if [ -e "$ARQUIVO_PROJETO_DEMAIS" ] || [ -e "$ARQUIVO_PROJETO_COMPLETO" ]; then
		MODULOS_PROJETO="${MODULOS_PROJETO} Outros \"Outros diretorios\""
	fi

	# Selecao de modulo
	MODULO=$(eval $DIALOG --stdout --menu \"Selecione o modulo do projeto $PROJETO a ser atualizado para o servidor de teste:\" 0 0 0 $MODULOS_PROJETO)

	# se o modulo for nulo, emitir mensagem e sair
	if [ -z "$MODULO" ]; then
		eval $DIALOG --title \"$SCRIPT\" --msgbox \"Nenhum modulo foi selecionado. Operacao cancelada.\" 0 0
		exit
	fi

	# se escolher a opcao 'Outros'
	if [ "$MODULO" = "Outros" ]; then
		LISTA_OUTRAS_OPCOES=$(sed '-n' 'p' $ARQUIVO_PROJETO_COMPLETO | cut -d: -f1,2 | sed 's/:/ "/;s/$/"/')

		if [ -e "$ARQUIVO_PROJETO_DEMAIS" ]; then
			LISTA_OUTRAS_OPCOES="Demais \"Demais pastas do projeto $PROJETO\" ${LISTA_OUTRAS_OPCOES}" 
		fi

		# Selecao de outras opcoes
		OPCAO=$(eval $DIALOG --stdout --menu \"Selecione uma opcao:\" 0 0 0 $LISTA_OUTRAS_OPCOES)

		# se a opcao for nula, emitir mensagem e sair
		if [ -z "$OPCAO" ]; then
			eval $DIALOG --title \"$SCRIPT\" --msgbox \"Nenhuma opcao foi selecionada. Operacao cancelada.\" 0 0
			exit
		fi

		eval $DIALOG --yesno \"Deseja realizar a operacao?\" 0 0
	
		if [ $? = 0 ]; then # Se escolher sim
			if [ "$OPCAO" = "Demais" ]; then
				# Executa a funcao para baixar o projeto do SVN
				baixaProjetoSvn

				while read LINHA
				do
					sincronizaDiretorio $LINHA
				done < $ARQUIVO_PROJETO_DEMAIS

				exibeResultado
			# Outros diretorios
			else
				DIR_DESTINO_ESCAPE=$(echo $DIR_DESTINO | sed "s,\/,\\\/,g")

				DIR_ALVO=$(sed "/$OPCAO/!d" $ARQUIVO_PROJETO_COMPLETO | cut -d: -f4)

				# formata os caminhos de origem e destino, exemplo:
				# antes.: siig:siig_homologacao
				# depois: /var/www/siig/ /var/www/siig_homologacao/
				PROJETO_COMPLETO=$(sed "/$OPCAO/!d" $ARQUIVO_PROJETO_COMPLETO | cut -d: -f3,4 | sed "s/^/$DIR_DESTINO_ESCAPE/; s/:/\/ $DIR_DESTINO_ESCAPE/; s/$/\//")

				DATA_HORA=$(date +%Y-%m-%d-%H-%M)

				DIR_BACKUP="${DIR_DESTINO}bkp-${DIR_ALVO}/$DATA_HORA"

				sincroniza $PROJETO_COMPLETO r

				exibeResultado
			fi
		fi
	else # Para a escolha de um modulo
		# Adiciona um nivel de diretorio na variavel modulo
		ARVORE="/view/"
		FACADE="$MODULO"

		# Converte o conteudo da variavel modulo para minusculo
		MODULO=$(echo $MODULO | tr [:upper:] [:lower:])

		DATA_HORA=$(date +%Y-%m-%d-%H-%M)

		DIR_BACKUP="${DIR_DESTINO}bkp-$PROJETO$ARVORE$MODULO/$DATA_HORA"

		# Une view/nome do modulo
		MODULO="$ARVORE$MODULO"

		# Executa a funcao para baixar o projeto do SVN
		baixaProjetoSvn

		# Sincroniza o projeto criando um backup
		DIR_EXISTE=$(ls $DIR_DESTINO$PROJETO/index.php)

		if [ -z "$DIR_EXISTE" ]; then
			sincroniza $DIR_TMP_SYNC $CAMINHO_DESTINO ra
		else
			sincroniza "$DIR_TMP_SYNC$MODULO" "$CAMINHO_DESTINO$PROJETO$ARVORE" ra
		fi

		# Sincroniza as fachadas do modulo
		DIR_BACKUP="${DIR_DESTINO}bkp-$PROJETO/model/facade/$DATA_HORA"
		cd "$DIR_TMP_SYNC/model/facade/"
		sincroniza "$FACADE*.php" "$CAMINHO_DESTINO$PROJETO/model/facade/" r
		cd $DIR_SCRIPT
		#sincroniza "$DIR_TMP_SYNC/model/facade/" "$CAMINHO_DESTINO$PROJETO/model/facade/" r --include="+ $DIR_TMP_SYNC/model/facade/$FACADE*.php" 

		exibeResultado
	fi
}

baixaProjetoSvn() {
	# Se o diretorio existir executar SVN update
	if [ -e "$DIR_TMP_SYNC" ]; then
		svn update $DIR_TMP_SYNC
	else # Senao, executar SVN checkout
		mkdir -p $DIR_TMP_SYNC
		svn checkout "svn://$SERVIDOR$DIR_REPOSITORIO$PROJETO" --username $USUARIO --password $SENHA_SVN $DIR_TMP_SYNC
	fi
}

sincroniza() {
	#echo $1 = origem
	#echo $2 = destino
	#echo $3 = r (recursive), a (archive), d (directory)
	#echo $4 = qualquer parametro do rsync

	# Cria o diretorio de backup com permissoes para outros usuarios gravarem nele
	NIVEL1_DIR_BACKUP=$(echo $DIR_BACKUP | cut -d"/" -f4)
	NIVEL1_DIR_BACKUP="${DIR_DESTINO}${NIVEL1_DIR_BACKUP}"

	[ ! -e "$NIVEL1_DIR_BACKUP" ] && mkdir -p "$NIVEL1_DIR_BACKUP"
	chmod 777 -R $NIVEL1_DIR_BACKUP 2> /dev/null

	# Sincroniza o projeto criando um backup
	##rsync -CvzpOu$3 $4 --chmod=$PERMISSOES -h -b --backup-dir=$DIR_BACKUP --delete --log-file=$ARQUIVO_LOG $1 $2
	rsync -CvzpOu$3 $4 --chmod=$PERMISSOES -h -b --backup-dir=$DIR_BACKUP --log-file=$ARQUIVO_LOG $1 $2
		
	# Apaga as 2 primeiras e 2 ultimas linhas do log que nao mostram o nome do arquivo
	cp $ARQUIVO_LOG $ARQUIVO_LOG.old
	sed "/building/ d; /done/ d; /receiving/ d; /sent/,+1 d" $ARQUIVO_LOG.old > $ARQUIVO_LOG
	rm $ARQUIVO_LOG.old

	# Atualiza o arquivo de log permanente
	cat $ARQUIVO_LOG >> $ARQUIVO_LOG_PERMANENTE
}

sincronizaDiretorio() {
	#echo $1 = diretorio
	#echo $2 = opcao do rsync
	DATA_HORA=$(date +%Y-%m-%d-%H-%M)
	DIR_BACKUP="${DIR_DESTINO}bkp-$PROJETO$1$DATA_HORA"

	sincroniza "$DIR_TMP_SYNC$1" "$CAMINHO_DESTINO$PROJETO$1" $2
}

exibeResultado() {
	CONTEUDO=$(cat $ARQUIVO_LOG)

	if [ -z "$CONTEUDO" ]; then
		eval $DIALOG --title \"$SCRIPT - log da atualizacao\" --msgbox \"Nenhum arquivo foi atualizado\" 0 0
	else
		eval $DIALOG --title \"$SCRIPT - log da atualizacao\" --textbox $ARQUIVO_LOG 0 0
	fi
	clear
}

verificaArquivo() {
	# Verifica a existencia do programa $1
	if [ ! -e "$1" ]; then
		echo "ATENCAO! O arquivo '$1' nao foi encontrado. Operacao cancelada."
		exit
	fi
}

principal
