#!/bin/bash
# sync2test
# Programa de sincronizacao de codigo-fonte com o servidor de teste
# 14/09/2009 - Luiz Sanches
# Colaboradores: Robison Viegas, Vitor Makino
# Versao 0.9
# Funcionalidades da Versao: atualizacao para trabalhar com cygwin

principal() {
	# Definicao de variaveis do programa
	DIR_SCRIPT=$(pwd)
	DIR_CONF="$HOME/.sync2test"
	ARQUIVO_CONF="$DIR_CONF/sync2test.conf"
	ARQUIVO_PROJETOS="$DIR_CONF/projetos"
	ARQUIVO_LOG="$DIR_CONF/.sync2test-temp.log" 
	ARQUIVO_LOG_PERMANENTE="$DIR_CONF/sync2test.log"
	PERMISSOES="Fugo+rw,Fugo-x"

	# Criacao do diretorio de configuracao do programa
	[ ! -e "$DIR_CONF" ] && mkdir "$DIR_CONF"

	# Definicao do program de dialogo como o usuario
	if [ "$DISPLAY" ]; then
		DIALOG="Xdialog"

		# Verifica a existencia do programa Xdialog
		[ ! -e "/usr/bin/$DIALOG" ] && DIALOG="dialog"
	else
		DIALOG="dialog"
	fi

	# Verifica a existencia dos programas
	verificaArquivo "/usr/bin/$DIALOG"
	verificaArquivo "/usr/bin/svn"
	verificaArquivo "/usr/bin/rsync"
	verificaArquivo "/usr/bin/ssh"
	verificaArquivo "/bin/sed"

	# Verifica a existencia do arquivo de projetos
	verificaArquivo "$ARQUIVO_PROJETOS"

	# seleciona os projetos, no arquivo projetos, com o padrao projeto:descricao
	LISTA_PROJETOS=$(sed '-n' 'p' $ARQUIVO_PROJETOS | sed 's/:/ "/;s/$/"/')

	# Selecao de projeto
	PROJETO=$( eval $DIALOG --stdout \
		--menu "\"Selecione o projeto:\"" \
		0 0 0 $LISTA_PROJETOS )

	# se o projeto for nulo, emitir mensagem e sair
	if [ -z "$PROJETO" ]; then
		$DIALOG                                             \
			--title 'sync2test'                            \
			--msgbox 'Nenhum projeto foi selecionado. Operacao cancelada.'  \
		6 40
		exit
	fi
	# Fim secao dos projetos

	# Verifica a existencia do arquivo de configuracao, para carregamento das variaveis
	if [ -e "$ARQUIVO_CONF" ]; then
		. $ARQUIVO_CONF
	else
		USUARIO=$( $DIALOG --stdout --inputbox 'Digite o nome do usuario:' 0 0 )
		SERVIDOR=$( $DIALOG --stdout --inputbox 'Digite o endereco do servidor:' 0 0 )
		SENHA_SVN=$( $DIALOG --stdout --passwordbox 'Digite a senha do svn:' 0 0 )
		DIR_REPOSITORIO=$( $DIALOG --stdout --inputbox 'Digite o caminho do repositorio SVN (com / no final):' 0 0 )
		DIR_DESTINO=$( $DIALOG --stdout --inputbox 'Digite o diretorio de destino (com / no final):' 0 0 )
		PORTA_SSH=$( $DIALOG --stdout --inputbox 'Digite o numero da porta do SSH:' 0 0 )

		echo "USUARIO=\"$USUARIO\"" > $ARQUIVO_CONF
		echo "SERVIDOR=\"$SERVIDOR\"" >> $ARQUIVO_CONF
		echo "SENHA_SVN=\"$SENHA_SVN\"" >> $ARQUIVO_CONF
		echo "DIR_REPOSITORIO=\"$DIR_REPOSITORIO\"" >> $ARQUIVO_CONF
		echo "DIR_DESTINO=\"$DIR_DESTINO\"" >> $ARQUIVO_CONF
		echo "PORTA_SSH=\"$PORTA_SSH\"" >> $ARQUIVO_CONF
	fi

	CAMINHO_DESTINO="$SERVIDOR:$DIR_DESTINO"

	# Criar autorizacao para nao pedir senha ao conectar via ssh
	if [ ! -e "$HOME/.ssh/authorized_keys" ]; then
		ssh -p $PORTA_SSH "$USUARIO@$SERVIDOR" "mkdir ~/.ssh ; touch ~/.ssh/authorized_keys"
		ssh-keygen -t dsa -f ~/.ssh/id_dsa
		cat ~/.ssh/id_dsa.pub | ssh -p $PORTA_SSH "$USUARIO@$SERVIDOR" "cat - >> ~/.ssh/authorized_keys"
		cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys
	fi

	# prepara o diretorio de sincronizacao
	DIR_TMP_SYNC="$HOME/tmp/sync2test/$PROJETO"

	# deleta o arquivo de log para mostrar somente a ultima sincronizacao
	[ -e "$ARQUIVO_LOG" ] && rm $ARQUIVO_LOG

	# seleciona os modulos do projeto, no arquivo $PROJETO_modulos, com o padrao modulo:descricao
	ARQUIVO_MODULOS="$DIR_CONF/${PROJETO}_modulos"
	
	# Verifica a existencia do arquivo de modulos
	verificaArquivo "$ARQUIVO_MODULOS"

	MODULOS_PROJETO=$(sed '-n' 'p' $ARQUIVO_MODULOS | sed 's/:/ "/;s/$/"/')

	ARQUIVO_PROJETO_DEMAIS="$DIR_CONF/${PROJETO}_demais"

	if [ -e "$ARQUIVO_PROJETO_DEMAIS" ]; then
		MODULOS_PROJETO="${MODULOS_PROJETO} Demais \"Demais pastas do projeto\""
	fi

	# Selecao de modulo
	MODULO=$( eval $DIALOG --stdout \
		--menu "\"Selecione o modulo do projeto $PROJETO a ser atualizado para o servidor de teste:\"" \
		0 0 0 $MODULOS_PROJETO )

	# se o modulo for nulo, emitir mensagem e sair
	if [ -z "$MODULO" ]; then
		$DIALOG                                             \
			--title 'sync2test'                            \
			--msgbox 'Nenhum modulo foi selecionado. Operacao cancelada.'  \
		6 40
		exit
	else
		# Se o modulo for igual 'Estrutura', deve perguntar se deseja sincronizar os demais diretorios do projeto
		if [ "$MODULO" = "Demais" ]; then
			$DIALOG --yesno "Deseja sincronizar as demais pastas do projeto $PROJETO?" 0 0
	
			if [ $? = 0 ]; then
				# Executa a funcao para baixar o projeto do SVN
				baixaProjetoSvn
	
				while read LINHA
				do
					sincronizaDiretorio "$LINHA"
				done < $ARQUIVO_PROJETO_DEMAIS
	
				exibeResultado
			fi
		else # Para a escolha de um modulo
			# Adiciona um nivel de diretorio na variavel modulo
			ARVORE="/view/"
			FACADE="$MODULO"
	
			# Converte o conteudo da variavel modulo para minusculo
			MODULO=$(echo $MODULO | tr [:upper:] [:lower:])

			DATA_HORA=$(date +%Y-%m-%d-%H-%M)
	
			DIR_BACKUP="${DIR_DESTINO}bkp-$PROJETO$ARVORE$MODULO/$DATA_HORA"
	
			# Une view/nome do modulo
			MODULO="$ARVORE$MODULO"
	
			# Executa a funcao para baixar o projeto do SVN
			baixaProjetoSvn
	
			# Sincroniza o projeto criando um backup
			DIR_EXISTE=$(ssh -p $PORTA_SSH "$USUARIO@$SERVIDOR" "ls $DIR_DESTINO$PROJETO/index.php")
	
			if [ -z "$DIR_EXISTE" ]; then
				sincroniza $DIR_TMP_SYNC $CAMINHO_DESTINO ra
			else
				sincroniza "$DIR_TMP_SYNC$MODULO" "$CAMINHO_DESTINO$PROJETO$ARVORE" ra
			fi
	
			# Sincroniza as fachadas do modulo
			DIR_BACKUP="${DIR_DESTINO}bkp-$PROJETO/model/facade/$DATA_HORA"
			cd "$DIR_TMP_SYNC/model/facade/"
			sincroniza "$FACADE*.php" "$CAMINHO_DESTINO$PROJETO/model/facade/" r
			cd $DIR_SCRIPT
			#sincroniza "$DIR_TMP_SYNC/model/facade/" "$CAMINHO_DESTINO$PROJETO/model/facade/" r --include="+ $DIR_TMP_SYNC/model/facade/$FACADE*.php" 

			exibeResultado
		fi
	fi
}

baixaProjetoSvn() {
	# Se o diretorio existir executar SVN update
	if [ -e "$DIR_TMP_SYNC" ]; then
		svn update $DIR_TMP_SYNC
	else # Senao, executar SVN checkout
		mkdir -p $DIR_TMP_SYNC
		svn checkout "svn://$SERVIDOR$DIR_REPOSITORIO$PROJETO" --username $USUARIO --password $SENHA_SVN $DIR_TMP_SYNC
	fi
}

sincroniza() {
	#echo $1 = origem
	#echo $2 = destino
	#echo $3 = r (recursive), a (archive), d (directory)
	#echo $4 = qualquer parametro do rsync

	# Sincroniza o projeto criando um backup
	# t
	rsync -CvzpOu$3 $4 --chmod=$PERMISSOES -h -b --backup-dir=$DIR_BACKUP --delete --log-file=$ARQUIVO_LOG -e "ssh -l $USUARIO -p $PORTA_SSH" $1 $2
		
	# Apaga as 2 primeiras e 2 ultimas linhas do log que nao mostram o nome do arquivo
	cp $ARQUIVO_LOG $ARQUIVO_LOG.old
	sed "/building/ d;/done/ d;/sent/,+1 d" $ARQUIVO_LOG.old > $ARQUIVO_LOG
	rm $ARQUIVO_LOG.old

	# Atualiza o arquivo de log permanente
	cat $ARQUIVO_LOG >> $ARQUIVO_LOG_PERMANENTE
}

sincronizaDiretorio() {
	#echo $1 = diretorio
	#echo $2 = opcao do rsync
	DATA_HORA=$(date +%Y-%m-%d-%H-%M)
	DIR_BACKUP="${DIR_DESTINO}bkp-$PROJETO$1$DATA_HORA"

	sincroniza "$DIR_TMP_SYNC$1" "$CAMINHO_DESTINO$PROJETO$1" $2
}

exibeResultado() {
	CONTEUDO=$(cat $ARQUIVO_LOG)

	if [ -z "$CONTEUDO" ]; then
		$DIALOG                                             \
			--title 'sync2test - log da atualizacao'       \
			--msgbox 'Nenhum arquivo foi atualizado'   \
		0 0
	else
		$DIALOG                                             \
			--title 'sync2test - log da atualizacao'       \
			--textbox $ARQUIVO_LOG   \
		0 0
	fi
	clear
}

verificaArquivo() {
	# Verifica a existencia do programa $1
	if [ ! -e "$1" ]; then
		echo "ATENCAO! O arquivo '$1' nao foi encontrado. Operacao cancelada."
		exit
	fi
}

principal $1
