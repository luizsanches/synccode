#!/bin/bash
# synccode
# Programa de sincronizacao de codigo-fonte entre servidores
# 23/03/2010 - Luiz Sanches - luizgrsanches@gmail.com
# Versao 1.07

principal() {
	# Altera a mascara padrao do sistema para rwxrwxr-x
	umask 002

	# Definicao de variaveis do programa
	SCRIPT="synccode"
	VERSAO_SCRIPT=$(sed '/Versao/!d; q' $0)

	DIR_SCRIPT=$(pwd)

	DIR_CONF="/opt/$SCRIPT"
	DIR_CONF_USER="$HOME/.$SCRIPT"

	ARQUIVO_CONF="$DIR_CONF/$SCRIPT.conf"
	ARQUIVO_CONF_USER="$DIR_CONF_USER/$SCRIPT.conf"

	ARQUIVO_PROJETOS="$DIR_CONF/projetos"
	ARQUIVO_GERENCIAS="$DIR_CONF/gerencias"

	# Criacao dos diretorios de configuracao do programa
	[ ! -e "$DIR_CONF" ] && mkdir "$DIR_CONF"
	[ ! -e "$DIR_CONF_USER" ] && mkdir "$DIR_CONF_USER"

	# Definicao do program de dialogo como o usuario
	if [ "$DISPLAY" ]; then
		DIALOG="Xdialog"

		# Verifica a existencia do programa Xdialog
		[ ! -e "/usr/bin/$DIALOG" ] && DIALOG="dialog"
	else
		DIALOG="dialog"
	fi

	# Verifica a existencia dos programas
	verificaArquivo "/usr/bin/$DIALOG"
	verificaArquivo "/usr/bin/svn"
	verificaArquivo "/usr/bin/rsync"
	verificaArquivo "/bin/sed"

	# Cria a variavel $DIALOG_TITLE com parametro do titulo na tela de fundo
	DIALOG="$DIALOG --backtitle '$SCRIPT - Sincroniza arquivos SVN com servidores de teste e producao. ${VERSAO_SCRIPT:2} - Usuario: $USER '"

	# Verifica a existencia do arquivo de projetos
	if [ ! -e "$ARQUIVO_PROJETOS" ]; then
		echo "projeto:Descricao do projeto" > $ARQUIVO_PROJETOS
	fi

	# seleciona os projetos, no arquivo projetos, com o padrao projeto:descricao
	LISTA_PROJETOS=$(sed '-n' 'p' $ARQUIVO_PROJETOS | sed "s/:/ '/;s/$/'/")

	while : ; do	
		# Selecao de projeto
		PROJETO=$(eval $DIALOG --stdout --title \"[ $SCRIPT ]\" --menu \"Selecione o projeto:\" 0 0 0 $LISTA_PROJETOS)

		# Se cancelar, sai do programa
		[ $? -ne 0 ] && break

		# Verifica a existencia do arquivo de modulos das gerencias
		ARQUIVO_MODULOS="$DIR_CONF/${PROJETO}_modulos"

		if [ ! -e "$ARQUIVO_MODULOS" ]; then
			echo "gerencia:Modulo:Descricao do modulo" > $ARQUIVO_MODULOS
		fi

		# Verifica a existencia do arquivo de configuracao, para carregamento das variaveis
		if [ -e "$ARQUIVO_CONF" ]; then
			. $ARQUIVO_CONF
		else
			SERVIDOR=$(eval $DIALOG --stdout --inputbox \"Digite o endereco do servidor SVN:\" 0 0 \"ip\")
			DIR_REPOSITORIO=$(eval $DIALOG --stdout --inputbox \"Digite o caminho do repositorio SVN \(com / no final\):\" 0 0 \"/var/svn/\")
			DIR_DESTINO=$(eval $DIALOG --stdout --inputbox \"Digite o diretorio de destino \(com / no final\):\" 0 0 \"/var/www/\")
			USUARIO_SVN=$(eval $DIALOG --stdout --inputbox \"Digite o nome do usuario de acesso ao SVN:\" 0 0 \"$USER\")
			SENHA_SVN=$(eval $DIALOG --stdout --inputbox \"Digite a senha do usuario SVN:\" 0 0 \"senha\")
			PORTA_SSH=$(eval $DIALOG --stdout --inputbox \"Digite a porta do SSH:\" 0 0 \"porta\")

			echo "SERVIDOR=\"$SERVIDOR\"" > $ARQUIVO_CONF
			echo "DIR_REPOSITORIO=\"$DIR_REPOSITORIO\"" >> $ARQUIVO_CONF
			echo "DIR_DESTINO=\"$DIR_DESTINO\"" >> $ARQUIVO_CONF
			echo "USUARIO_SVN=\"$USUARIO_SVN\"" >> $ARQUIVO_CONF
			echo "SENHA_SVN=\"$SENHA_SVN\"" >> $ARQUIVO_CONF
			echo "PORTA_SSH=\"$PORTA_SSH\"" >> $ARQUIVO_CONF
		fi

		# Verifica a existencia do arquivo de configuracao do usuario, para carregamento das variaveis
		if [ -e "$ARQUIVO_CONF_USER" ]; then
			. $ARQUIVO_CONF_USER
		else
			# Verifica a existencia do arquivo de gerencias
			if [ ! -e "$ARQUIVO_GERENCIAS" ]; then
				echo "gerencia:Descricao da gerencia" > $ARQUIVO_GERENCIAS
			fi

			# seleciona as gerencias, no arquivo gerencias, com o padrao gerencia:descricao
			LISTA_GERENCIAS=$(sed '-n' 'p' $ARQUIVO_GERENCIAS | sed "s/:/ '/;s/$/'/")

			# Selecao de gerencia
			GERENCIA=$(eval $DIALOG --stdout --title \"[ $SCRIPT ]\" --menu \"Selecione a gerencia em que trabalha:\" 0 0 0 $LISTA_GERENCIAS)

			# Converte o conteudo da variavel gerencia para minusculo
			GERENCIA=$(echo $GERENCIA | tr [:upper:] [:lower:])

			# se a gerencia for nula, emitir mensagem e retornar a tela de projetos
			if [ -z "$GERENCIA" ]; then
				eval $DIALOG --title \"$SCRIPT\" --msgbox \"Nenhuma gerencia foi selecionada.\" 0 0
				continue
			fi

			echo "GERENCIA=\"$GERENCIA\"" > $ARQUIVO_CONF_USER
		fi

		# Arquivos de log
		ARQUIVO_LOG="$DIR_CONF_USER/.$SCRIPT-temp.log"
		DIR_LOG_PERMANENTE="$DIR_DESTINO/.$SCRIPT/log"
		ARQUIVO_LOG_PERMANENTE="$DIR_LOG_PERMANENTE/${PROJETO}_${USER}.log"

		[ ! -e "$DIR_LOG_PERMANENTE" ] && mkdir -p $DIR_LOG_PERMANENTE

		# Prepara o diretorio de sincronizacao
		DIR_TMP_SYNC="${DIR_DESTINO}.$SCRIPT/$PROJETO"

		# Seleciona os modulos do projeto, no arquivo $PROJETO_modulos, com o padrao gerencia:modulo:descricao
		ARQUIVO_MODULOS="$DIR_CONF/${PROJETO}_modulos"
		
		verificaArquivo "$ARQUIVO_MODULOS"

		MODULOS_PROJETO=$(sed "/$GERENCIA/!d" $ARQUIVO_MODULOS | cut -d: -f2,3 | sed 's/:/ "/;s/$/"/')

		ARQUIVO_PROJETO_DEMAIS="$DIR_CONF/${PROJETO}_demais"

		ARQUIVO_PROJETO_COMPLETO="$DIR_CONF/${PROJETO}_completo"

		if [ ! -e "$ARQUIVO_PROJETO_DEMAIS" ]; then
			echo "/diretorio/ dr" > $ARQUIVO_PROJETO_DEMAIS
		fi

		if [ -e "$ARQUIVO_PROJETO_DEMAIS" ] || [ -e "$ARQUIVO_PROJETO_COMPLETO" ]; then
			MODULOS_PROJETO="${MODULOS_PROJETO} Outros \"Outros diretorios\""
		fi

		while : ; do
			# deleta o arquivo de resultado para mostrar somente a ultima sincronizacao
			[ -e "${ARQUIVO_LOG}.res" ] && rm "${ARQUIVO_LOG}.res"

			# Selecao de modulo
			MODULO=$(eval $DIALOG --stdout --title \"[ $SCRIPT ]\" --menu \"Selecione o modulo do projeto [$PROJETO] a ser atualizado para o servidor de teste na pasta [$PROJETO]:\" 0 0 0 $MODULOS_PROJETO)

			# Se cancelou retorna a tela de projetos
			[ $? -ne 0 ] && break

			# se escolher a opcao 'Outros'
			if [ "$MODULO" = "Outros" ]; then
				LISTA_OUTRAS_OPCOES=$(sed '-n' 'p' $ARQUIVO_PROJETO_COMPLETO | cut -d: -f1,2 | sed 's/:/ "/;s/$/"/')

				if [ -e "$ARQUIVO_PROJETO_DEMAIS" ]; then
					LISTA_OUTRAS_OPCOES="Demais \"Demais pastas comuns a todos os modulos do projeto [$PROJETO]\" ${LISTA_OUTRAS_OPCOES}"
				fi

				while : ; do
					# deleta o arquivo de resultado para mostrar somente a ultima sincronizacao
					[ -e "${ARQUIVO_LOG}.res" ] && rm "${ARQUIVO_LOG}.res"

					# Selecao de outras opcoes
					OPCAO=$(eval $DIALOG --stdout --menu \"Selecione uma opcao:\" 0 0 0 $LISTA_OUTRAS_OPCOES)

					# Se cancelar retorna a tela de modulos
					[ $? -ne 0 ] && break

					if [ "$OPCAO" = "Demais" ]; then
						# Executa a funcao para baixar o projeto do SVN
						baixaProjetoSvn

						while read LINHA
						do
							sincronizaDiretorio $LINHA
						done < $ARQUIVO_PROJETO_DEMAIS

						exibeResultado
					# Outros diretorios (completo)
					else
						DIR_DESTINO_ESCAPE=$(echo $DIR_DESTINO | sed "s,\/,\\\/,g")

						DIR_ALVO=$(sed "/$OPCAO/!d" $ARQUIVO_PROJETO_COMPLETO | cut -d: -f4)

						DATA=$(date +%Y-%m-%d)
						HORA=$(date +%H-%M)

						PROJETO_COMPLETO_COMUNICACAO=$(sed "/$OPCAO/!d" $ARQUIVO_PROJETO_COMPLETO | cut -d: -f5)

						# Se o 5o parametro for "SSH" entao sincronizar via ssh
						if [ "$PROJETO_COMPLETO_COMUNICACAO" = "SSH" ]; then
							# formata os caminhos do servidor e diretorio de destino via SSH
							# antes: siig_homologacao:192.168.200.12@/var/www/#siig
							# depois: /var/www/siig_homologacao/ 192.168.200.12:/var/www/siig/

							PROJETO_COMPLETO_DIR_DESTINO=$(sed "/$OPCAO/!d" $ARQUIVO_PROJETO_COMPLETO | cut -d: -f4 | cut -d@ -f2 | cut -d# -f1)

							PROJETO_COMPLETO_DIR_ALVO=$(sed "/$OPCAO/!d" $ARQUIVO_PROJETO_COMPLETO | cut -d: -f4 | cut -d@ -f2 | cut -d# -f2)

							DIR_BACKUP="${PROJETO_COMPLETO_DIR_DESTINO}bkp-${PROJETO_COMPLETO_DIR_ALVO}/$DATA/$HORA"

							ARQUIVO_LOG_PERMANENTE="${DIR_DESTINO}.$SCRIPT/log/${PROJETO_COMPLETO_DIR_ALVO}_${USER}.log"

							PROJETO_COMPLETO=$(sed "/$OPCAO/!d" $ARQUIVO_PROJETO_COMPLETO | cut -d: -f3,4 | sed "s/^/$DIR_DESTINO_ESCAPE/; s/:/\/ /; s/$/\//; s/@/:/; s/#//")

 							sincroniza $PROJETO_COMPLETO r "SIMULA" "$OPCAO" "SSH"

						# Senao sincroniza no mesmo servidor
						else
							# formata os caminhos de origem e destino, exemplo:
							# antes.: siig:siig_homologacao
							# depois: /var/www/siig/ /var/www/siig_homologacao/

							ARQUIVO_LOG_PERMANENTE="$DIR_LOG_PERMANENTE/${DIR_ALVO}_${USER}.log"

							DIR_BACKUP="${DIR_DESTINO}bkp-${DIR_ALVO}/$DATA/$HORA"

							PROJETO_COMPLETO=$(sed "/$OPCAO/!d" $ARQUIVO_PROJETO_COMPLETO | cut -d: -f3,4 | sed "s/^/$DIR_DESTINO_ESCAPE/; s/:/\/ $DIR_DESTINO_ESCAPE/; s/$/\//")

							sincroniza $PROJETO_COMPLETO r "SIMULA" "$OPCAO"
						fi

						exibeResultado
					fi
				done
			else # Para a escolha de um modulo
				TITULO_MODULO=$(sed "/$GERENCIA:$MODULO/!d" $ARQUIVO_MODULOS | cut -d: -f3)

				DATA=$(date +%Y-%m-%d)
				HORA=$(date +%H-%M)

				DIR_BACKUP="${DIR_DESTINO}bkp-$PROJETO/$DATA/$HORA"

				# Executa a funcao para baixar o projeto do SVN
				baixaProjetoSvn

				# Sincroniza o projeto criando um backup
				# Se o diretorio do projeto nao existir, sincroniza tudo
				if [ ! -e "$DIR_DESTINO$PROJETO" ]; then
					sincroniza "$DIR_TMP_SYNC" "$DIR_DESTINO" a "naosimula" "$MODULO"
				# Se existir, sincroniza somente os diretorios do modulo selecionado
				else
					sincroniza "$DIR_TMP_SYNC" "$DIR_DESTINO" r "SIMULA" "Modulo: $TITULO_MODULO" "LOCAL" "$GERENCIA:$MODULO"
				fi

				exibeResultado
			fi
		done
	done

	clear
	exit
}

baixaProjetoSvn() {
	# Se o diretorio existir executar SVN update
	if [ -e "$DIR_TMP_SYNC" ]; then
		svn update $DIR_TMP_SYNC
	else # Senao, executar SVN checkout
		mkdir -p $DIR_TMP_SYNC
 		svn checkout "svn://$SERVIDOR$DIR_REPOSITORIO$PROJETO" --username $USUARIO_SVN --password $SENHA_SVN $DIR_TMP_SYNC
	fi
}

sincroniza() {
	#echo $1 = origem
	#echo $2 = destino
	#echo $3 = r (recursive), a (archive), d (directory)
	#echo $4 = qualquer parametro do rsync
	#echo $5 = titulo da janela (nome do modulo/servidor)
	#echo $6 = modo de comunicacao SSH ou vazio
	#echo $7 = modulo:gerencia

	# Seleciona arquivos que nao serao sincronizados
	ARQUIVO_PROJETO_EXCLUDE="$DIR_CONF/${PROJETO}_exclude"
	LISTA_EXCLUDE="$DIR_CONF_USER/.lista_exclude"
	LISTA_TMP="$DIR_CONF_USER/.lista_tmp"
	ARQUIVO_COM_ESPACO="$DIR_CONF_USER/.tem_espaco"

	# deleta o arquivo de arquivos com espaco
	[ -e "$ARQUIVO_COM_ESPACO" ] && rm $ARQUIVO_COM_ESPACO

	# deleta o arquivo de log
	[ -e "$ARQUIVO_LOG" ] && rm $ARQUIVO_LOG

	# Cria a lista de arquivos que nao serao sincronizados
	[ -e "$LISTA_EXCLUDE" ] && rm $LISTA_EXCLUDE

	[ -e "$ARQUIVO_PROJETO_EXCLUDE" ] && cat $ARQUIVO_PROJETO_EXCLUDE > $LISTA_EXCLUDE

	# Se o arquivo nao foi criado, criar um vazio
	[ ! -e "$LISTA_EXCLUDE" ] && touch $LISTA_EXCLUDE

	if [ "$4" = "SIMULA" ]; then
		# Simula (-n) a sincronizacao guardando em arquivo
		if [ "$6" = "SSH" ]; then
			rsync -CvzpOu$3 -n -e "ssh -l $USER -p $PORTA_SSH" --delete --exclude-from=$LISTA_EXCLUDE $1 $2 > $LISTA_TMP
		else
			rsync -CvzpOu$3 -n --delete --exclude-from=$LISTA_EXCLUDE $1 $2 > $LISTA_TMP
		fi

		# Apaga as demais linhas, deixando somente os nomes dos arquivos
		sed '/^$/ d; /^sen/ d; /^total/ d; /^deleting/ d; /^building/ d; /^skipping/ d;' "$LISTA_TMP" > "${LISTA_TMP}1"

		# Adiciona os arquivos na lista de arquivos para nao sincronizar
		cat "${LISTA_TMP}1" >> $LISTA_EXCLUDE

		# Verifica na lista se existe algum arquivo com espaco em branco no nome
		sed '/ / !d' $LISTA_EXCLUDE > $ARQUIVO_COM_ESPACO

		TEM_ESPACO=$(sed '/ / !d' "$LISTA_EXCLUDE")

		if [ -n "$TEM_ESPACO" ]; then
			eval $DIALOG --title \"Arquivos com espacos\" --textbox \"$ARQUIVO_COM_ESPACO\" 0 0
		else
			# Adiciona os campos para preparar para a caixa de checkbox do dialog
			sed "s/$/ '' OFF/g" "${LISTA_TMP}1" > "$LISTA_TMP"
			rm "${LISTA_TMP}1" 

			# Filtra somente os arquivos do modulo selecionado
			if [ -n "$7" ]; then
				[ -e "${LISTA_TMP}0" ] && rm "${LISTA_TMP}0"

				FILTROS_MODULO=$(sed "/$7/!d" $ARQUIVO_MODULOS | cut -d: -f4 | sed 's/|/\n/g')

				# Percorre os itens do filtro para colocar escape nas barras de divisao de diretorios
				echo "$FILTROS_MODULO" | while read LINHA
				do
					TEMP=$(echo $LINHA | sed 's,\/,\\\/,g')
					sed "/$TEMP/ !d" "${LISTA_TMP}" >> "${LISTA_TMP}0"
				done

				mv "${LISTA_TMP}0" "$LISTA_TMP"
			fi

			# Mostra os arquivos e opcao para selecionar os que nao serao sincronizados
			ARQ_EXCLUDES=$(cat $LISTA_TMP)

			[ -e "$LISTA_TMP" ] && rm $LISTA_TMP

			# Se nao for nula, exibira a caixa com os arquivos para selecao
			if [ -n "$ARQ_EXCLUDES" ]; then
				LISTA_SINCRONIZAR=$(eval $DIALOG --stdout --separate-output --title \"[ $5 ]\" --checklist \"Marque os arquivos, com a barra de espaco, que serao sincronizados\" 0 0 0 $ARQ_EXCLUDES)

				# Se nao cancelou
				if [ $? -eq 0 ]; then
					# Se selecionou arquivos
					if [ -n "$LISTA_SINCRONIZAR" ]; then
						# Adiciona na lista os arquivos que nao serao sincronizados
						echo "$LISTA_SINCRONIZAR" | while read LINHA
						do
							# Adiciona escape nas barras separadoras dos diretorios
							LINHA_TEMP=$(echo $LINHA | sed "s,\/,\\\/,g")

							# Deleta o arquivo selecionado da lista dos arquivos que nao serao sincronizados
							sed "/$LINHA_TEMP/d" $LISTA_EXCLUDE > "${LISTA_EXCLUDE}.tmp"

							mv "${LISTA_EXCLUDE}.tmp" $LISTA_EXCLUDE
						done

						# Sincroniza o projeto sem os arquivos selecionados anteriormente

						if [ "$6" = "SSH" ]; then # Via SSH
							SERVIDOR_PRODUCAO=$(echo $2 | cut -d: -f1)

							ssh -p $PORTA_SSH $SERVIDOR_PRODUCAO "umask 002 ; mkdir -p $DIR_BACKUP"

							rsync -Cvzpu$3 -e "ssh -l $USER -p $PORTA_SSH" --delete --no-perms -h -b --backup-dir=$DIR_BACKUP --log-file=$ARQUIVO_LOG --exclude-from=$LISTA_EXCLUDE $1 $2

						else # No mesmo servidor
							rsync -CvzpOu$3 --delete --no-perms -h -b --backup-dir=$DIR_BACKUP --log-file=$ARQUIVO_LOG --exclude-from=$LISTA_EXCLUDE $1 $2
						fi
					fi
				fi
			else
				# Sincroniza o projeto prevendo delecao de arquivos
				rsync -CvzpOu$3 --delete --no-perms -h -b --backup-dir=$DIR_BACKUP --log-file=$ARQUIVO_LOG --exclude-from=$LISTA_EXCLUDE $1 $2
			fi
		fi
	else
		# Sincroniza o projeto sem perguntar nada
		rsync -CvzpOu$3 $4 --delete --no-perms -h -b --backup-dir=$DIR_BACKUP --log-file=$ARQUIVO_LOG --exclude-from=$LISTA_EXCLUDE $1 $2
	fi

	if [ -e "$ARQUIVO_LOG" ]; then
		# Apaga as linhas abaixo do log para mostrar somente o nome dos arquivos sincronizados
		mv "$ARQUIVO_LOG" "${ARQUIVO_LOG}.old"
		sed "/building/ d; /done/ d; /receiving/ d; /sent/,+1 d" "${ARQUIVO_LOG}.old" > "$ARQUIVO_LOG"
		rm "${ARQUIVO_LOG}.old"
		cat "$ARQUIVO_LOG" >> "${ARQUIVO_LOG}.res"
	fi
}

sincronizaDiretorio() {
	#echo $1 = diretorio
	#echo $2 = opcao do rsync
	DATA=$(date +%Y-%m-%d)
	HORA=$(date +%H-%M)
	DIR_BACKUP="${DIR_DESTINO}bkp-$PROJETO/$DATA/$HORA$1"

	[ -e "$DIR_TMP_SYNC$1" ] && sincroniza "$DIR_TMP_SYNC$1" "$DIR_DESTINO$PROJETO$1" $2 "SIMULA" "$1"
}

exibeResultado() {
	CONTEUDO=$(cat "${ARQUIVO_LOG}.res")

	if [ -z "$CONTEUDO" ]; then
		eval $DIALOG --title \"log da atualizacao\" --msgbox \"Nenhum arquivo foi atualizado\" 0 0
	else
		# Atualiza o arquivo de log permanente
		cat "${ARQUIVO_LOG}.res" >> $ARQUIVO_LOG_PERMANENTE

		eval $DIALOG --title \"log da atualizacao\" --textbox "${ARQUIVO_LOG}.res" 0 0
	fi
}

verificaArquivo() {
	# Verifica a existencia do programa $1
	if [ ! -e "$1" ]; then
		echo "ATENCAO! O arquivo '$1' nao foi encontrado. Operacao cancelada."
		exit
	fi
}

principal
